{"version":3,"file":"static/js/233.11a4308a.chunk.js","mappings":"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","sources":["webpack://socnet/./src/components/Messages/Messages.module.scss?b126","components/Messages/MessagesForm.jsx","api/websocket.ts","components/Messages/Messages.jsx","components/Messages/MessagesContainer.tsx","webpack://socnet/./src/components/common/Textarea/Textarea.module.scss?a94a","components/common/Textarea/Textarea.tsx","hoc/withAuth.js","utilites/validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Messages\":\"Messages_Messages__1EQQz\",\"friends\":\"Messages_friends__nEokc\",\"messages\":\"Messages_messages__ViKAd\",\"messagesBox\":\"Messages_messagesBox__UwwLl\",\"messageAvatar\":\"Messages_messageAvatar__pgT7y\",\"friend\":\"Messages_friend__XftjX\",\"active\":\"Messages_active__8HIPB\",\"avatar\":\"Messages_avatar__K6DLY\",\"name\":\"Messages_name__sHyXH\",\"message\":\"Messages_message__LQOQA\",\"messageBox\":\"Messages_messageBox__gSD3Y\",\"messageDate\":\"Messages_messageDate__CpBsr\",\"MessagesForm\":\"Messages_MessagesForm__zWKIY\",\"textarea\":\"Messages_textarea__tglNx\",\"btn\":\"Messages_btn__kwvO+\",\"box\":\"Messages_box__+4OW+\"};","import s from './Messages.module.scss';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport TextArea from '../common/Textarea/Textarea.tsx';\r\nimport { textValidator } from '../../utilites/validators';\r\nconst textValidator300 = textValidator(300)\r\n\r\nconst MessagesForm = (props) => {\r\n    const {handleSubmit} = props;\r\n    return (\r\n        <form className={s.MessagesForm} onSubmit={handleSubmit}>\r\n            <Field className={s.textarea} component={TextArea} name=\"message\" validate={[textValidator300]} />\r\n            <button className={s.btn} type=\"submit\">Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({form: 'messages'})(MessagesForm);","export const ws = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\");\r\n","import s from \"./Messages.module.scss\";\r\nimport avatar from \"../../assets/avatar.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MessagesForm from \"./MessagesForm\";\r\nimport userAvatar from \"../../assets/avatar.png\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useCallback } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { ws } from \"../../api/websocket.ts\";\r\n\r\nconst Messages = (props) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const messagesBox = useRef();\r\n\r\n  //Get messages websocket\r\n  useEffect(() => {\r\n    ws.addEventListener(\"message\", (e) => {\r\n      setMessages((prev) => [...prev, ...JSON.parse(e.data)]);\r\n      // Setting messages box scroll\r\n    });\r\n  }, []);\r\n\r\n  //Send message\r\n  const sendMessage = useCallback(\r\n    (message) => {\r\n      if (ws) ws.send(message);\r\n    },\r\n    [ws]\r\n  );\r\n\r\n  //Set scroll to bottom\r\n  useEffect(() => {\r\n    messagesBox.current.scrollTop = messagesBox.current.scrollHeight + messagesBox.current.offsetHeight\r\n  }, [messages])\r\n\r\n  useEffect(() => {\r\n    if (messagesBox) {\r\n      messagesBox.current.addEventListener(\"scroll\", () => {\r\n        console.log('scroll Top',messagesBox.current.scrollTop);\r\n        console.log('scroll Height',messagesBox.current.scrollHeight);\r\n        console.log('inner Height',messagesBox.current.offsetHeight);\r\n      });\r\n    }\r\n  }, [messagesBox]);\r\n\r\n  return (\r\n    <div className={s.Messages}>\r\n      <ul className={s.friends}>\r\n        {props.friends.length === 0 ? (\r\n          <p className={s.empty}>You don't have friends yet</p>\r\n        ) : (\r\n          props.friends.map((friend) => {\r\n            return (\r\n              <Link\r\n                className={s.friend}\r\n                key={friend.id}\r\n                to={`/profile/${friend.id}`}\r\n              >\r\n                <img\r\n                  src={friend.photos.small ? friend.photos.small : avatar}\r\n                  alt=\"\"\r\n                  className={s.avatar}\r\n                />\r\n                <p className={s.name}>{friend.name}</p>\r\n              </Link>\r\n            );\r\n          })\r\n        )}\r\n      </ul>\r\n      <div className={s.messages}>\r\n        <div className={s.messagesBox} ref={messagesBox}>\r\n          {messages.map((message, index) => {\r\n            return (\r\n              <div className={s.message} key={index}>\r\n                <div className={s.messageBox}>\r\n                  <Link to={`/profile/${message.userId}`}>\r\n                    <img\r\n                      src={message.photo || userAvatar}\r\n                      className={s.messageAvatar}\r\n                    />\r\n                  </Link>\r\n                  <span className={s.messageDate}>{message.userId}</span>\r\n                </div>\r\n                <p className={s.messageText}>{message.message}</p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <MessagesForm onSubmit={(data) => sendMessage(data.message)} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport withRedirect from \"../../hoc/withAuth\";\r\nimport Messages from \"./Messages\";\r\nimport { sendMessageThunk as sendMessage } from \"../../redux/profileReducer.ts\";\r\nimport { UserType, MessageType } from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n  friends: UserType[] | [];\r\n  messages: MessageType[] | [];\r\n  dispatch: () => void;\r\n  sendMessage: () => void;\r\n  ws: any;\r\n};\r\n\r\nclass MessagesContainer extends React.Component<PropsType, any> {\r\n  render() {\r\n    return (\r\n      <Messages\r\n        messages={this.props.messages}\r\n        friends={this.props.friends}\r\n        sendMessage={this.props.sendMessage}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    friends: state.users.friends,\r\n    messages: state.profile.messages,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  withRedirect,\r\n  connect(mapStateToProps, { sendMessage })\r\n)(MessagesContainer);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Textarea_container__8xwgg\",\"error\":\"Textarea_error__Zh8jH\"};","import React from 'react';\r\nimport s from './Textarea.module.scss';\r\n\r\nconst Textarea: React.FC = ({ input, meta, ...props }: any) => {\r\n  return (\r\n    <div className={s.container}>\r\n      {meta.error && meta.error.code === 0 && meta.touched && !meta.active && <p className={s.error}>{meta.error.message}</p>}\r\n      {meta.error && meta.error.code === 1 && <p className={s.error}>{meta.error.message}</p>}\r\n      {meta.error && meta.error.code === 2 && meta.touched && !meta.active && <p className={s.error}>{meta.error.message}</p>}\r\n      <textarea {...input} {...props}></textarea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Textarea;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst withAuth = (Component)=> {\r\n    class withRedirect extends React.Component {\r\n        render() {\r\n            if (this.props.isAuth === false) {\r\n\r\n                return <Navigate to=\"/login\" />\r\n            }\r\n            return(\r\n                <Component  />\r\n            )\r\n        }\r\n    }\r\n    const mapStateToProps = (state)=> {\r\n        return {\r\n            isAuth: state.auth.isAuth,\r\n        }\r\n    }\r\n    return connect(mapStateToProps)(withRedirect);\r\n}\r\n\r\n\r\n\r\nexport default withAuth;","export const statusValidator = (status) => {\r\n  if (typeof status === \"string\") {\r\n    return /[a-zA-Z1-9]/.test(status) || status.length === 0;\r\n  }\r\n};\r\n\r\nexport const emailValidator = (email) => {\r\n  if (!(email && /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email))) {\r\n    return { code: 4, message: \"Invalid email address\" };\r\n  }\r\n};\r\n\r\nexport const textValidator = (maxLength) => (text) => {\r\n  if (!text) return { code: 0, message: \"Value mustn't be empty !\" };\r\n  if (text && text.length > maxLength)\r\n    return { code: 1, message: `Max length: ${maxLength} characters !` };\r\n  if (text && !/[a-zA-Z1-9]/.test(text))\r\n    return { code: 2, message: \"Value must contain numbers or letters !\" };\r\n  return undefined;\r\n};\r\n\r\nexport const authValidator = (login) => {\r\n  if (login && login.length < 4)\r\n    return { code: 2, message: \"Min length is 4 characters !\" };\r\n  if (login && login.length > 35)\r\n    return { code: 3, message: \"Max length is 35 characters !\" };\r\n  if (login && !/[a-zA-Z]/.test(login))\r\n    return { code: 1, message: \"Value must contain letters !\" };\r\n  if (!login) return { code: 0, message: \"This field is required\" };\r\n  return undefined;\r\n};\r\n"],"names":["textValidator300","textValidator","reduxForm","form","props","handleSubmit","className","s","onSubmit","Field","component","TextArea","name","validate","type","ws","WebSocket","useState","messages","setMessages","messagesBox","useRef","useEffect","addEventListener","e","prev","JSON","parse","data","sendMessage","useCallback","message","send","current","scrollTop","scrollHeight","offsetHeight","console","log","friends","length","map","friend","to","id","src","photos","small","avatar","alt","ref","index","userId","photo","userAvatar","MessagesContainer","this","React","compose","withRedirect","connect","state","users","profile","input","meta","error","code","touched","active","Component","isAuth","auth","statusValidator","status","test","emailValidator","email","maxLength","text","authValidator","login"],"sourceRoot":""}
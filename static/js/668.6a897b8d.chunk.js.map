{"version":3,"file":"static/js/668.6a897b8d.chunk.js","mappings":"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","sources":["webpack://socnet/./src/components/Login/Login.module.scss?4086","webpack://socnet/./src/components/common/TextInput/TextInput.module.scss?a252","components/common/TextInput/TextInput.tsx","components/Login/LoginForm.tsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx","utilites/validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Login\":\"Login_Login__+nDog\",\"title\":\"Login_title__cP2ya\",\"form\":\"Login_form__sNIBg\",\"input\":\"Login_input__r-1Vl\",\"checkbox\":\"Login_checkbox__RTXBS\",\"rememberLabel\":\"Login_rememberLabel__T7iaF\",\"remember\":\"Login_remember__sl3-r\",\"btn\":\"Login_btn__FohTS\",\"notFound\":\"Login_notFound__bCo5-\",\"captchaImg\":\"Login_captchaImg__W5yDN\"};","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"TextInput_box__IWX9B\",\"error\":\"TextInput_error__q3XPO\"};","import React from 'react';\r\nimport s from './TextInput.module.scss';\r\n\r\nconst TextInput :React.FC = ({input, meta, ...props}: any)=> {\r\n    return (\r\n        <div className={s.box}>\r\n            <input {...props} {...input} />\r\n            {meta.error && meta.error.code === 3 && <p className={s.error}>{meta.error && meta.error.message}</p>}\r\n            {meta.error && [0,1,2,4].includes(meta.error.code) && meta.touched && !meta.active && <p className={s.error}>{meta.error && meta.error.message}</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextInput;","import React from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport s from \"./Login.module.scss\";\r\nimport TextInput from \"../common/TextInput/TextInput.tsx\";\r\nimport {\r\n  authValidator,\r\n  emailValidator,\r\n  textValidator,\r\n} from \"../../utilites/validators\";\r\nimport Preloader from \"../common/Preloader/Preloader.tsx\";\r\n\r\nconst textValidator16 = textValidator(16);\r\nconst LoginForm = React.memo((props) => {\r\n  const { handleSubmit } = props;\r\n  return (\r\n    <form onSubmit={handleSubmit} className={s.form}>\r\n      <h1 className={s.title}>Log in</h1>\r\n      {props.auth.submitError && (\r\n        <p className={s.notFound}>{props.auth.submitError}</p>\r\n      )}\r\n      <Field\r\n        className={s.input}\r\n        validate={[authValidator, emailValidator]}\r\n        component={TextInput}\r\n        name=\"email\"\r\n        placeholder=\"Your email...\"\r\n        type=\"text\"\r\n      />\r\n      <Field\r\n        className={s.input}\r\n        validate={[authValidator]}\r\n        component={TextInput}\r\n        name=\"password\"\r\n        placeholder=\"Your password...\"\r\n        type=\"password\"\r\n      />\r\n      {props.auth.fetchingCaptcha && (\r\n        <Preloader isFetching={props.auth.fetchingCaptcha} />\r\n      )}\r\n      {props.auth.captcha && (\r\n        <div className={s.captcha}>\r\n          <img\r\n            className={s.captchaImg}\r\n            src={props.auth.captcha}\r\n          />\r\n          <Field\r\n            className={s.input}\r\n            validate={[textValidator16]}\r\n            component={TextInput}\r\n            name=\"captcha\"\r\n            placeholder=\"Captcha text\"\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n      )}\r\n      <div className={s.checkbox}>\r\n        <Field\r\n          className={s.remember}\r\n          component=\"input\"\r\n          name=\"rememberMe\"\r\n          id=\"remember\"\r\n          type=\"checkbox\"\r\n        />\r\n        <label className={s.rememberLabel} htmlFor=\"remember\">\r\n          Remember me\r\n        </label>\r\n      </div>\r\n      <button\r\n        className={s.btn}\r\n        type=\"submit\"\r\n        disabled={props.auth.buttonDisabled}\r\n      >\r\n        <span>Log in</span>\r\n      </button>\r\n    </form>\r\n  );\r\n});\r\n\r\nexport default reduxForm({ form: \"login\" })(LoginForm);\r\n","import s from './Login.module.scss';\r\nimport LoginForm from './LoginForm.tsx';\r\n\r\nconst Login = (props)=> {\r\n    return(\r\n        <div className={s.Login}>\r\n           <LoginForm onSubmit={props.login} {...props}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\nimport Login from \"./Login.tsx\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { loginThunk as login } from \"../../redux/authReducer.ts\";\r\n\r\nconst LoginContainer = (props) => {\r\n  return props.auth.isAuth ? <Navigate to=\"/\" /> : <Login {...props} />;\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    auth: state.auth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { login })(LoginContainer);\r\n","export const statusValidator = (status) => {\r\n  if (typeof status === \"string\") {\r\n    return /[a-zA-Z1-9]/.test(status) || status.length === 0;\r\n  }\r\n};\r\n\r\nexport const emailValidator = (email) => {\r\n  if (!(email && /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email))) {\r\n    return { code: 4, message: \"Invalid email address\" };\r\n  }\r\n};\r\n\r\nexport const textValidator = (maxLength) => (text) => {\r\n  if (!text) return { code: 0, message: \"Value mustn't be empty !\" };\r\n  if (text && text.length > maxLength)\r\n    return { code: 1, message: `Max length: ${maxLength} characters !` };\r\n  if (text && !/[a-zA-Z1-9]/.test(text))\r\n    return { code: 2, message: \"Value must contain numbers or letters !\" };\r\n  return undefined;\r\n};\r\n\r\nexport const authValidator = (login) => {\r\n  if (login && login.length < 4)\r\n    return { code: 2, message: \"Min length is 4 characters !\" };\r\n  if (login && login.length > 35)\r\n    return { code: 3, message: \"Max length is 35 characters !\" };\r\n  if (login && !/[a-zA-Z]/.test(login))\r\n    return { code: 1, message: \"Value must contain letters !\" };\r\n  if (!login) return { code: 0, message: \"This field is required\" };\r\n  return undefined;\r\n};\r\n"],"names":["input","meta","props","className","s","error","code","message","includes","touched","active","textValidator16","textValidator","LoginForm","React","handleSubmit","onSubmit","auth","submitError","Field","validate","authValidator","emailValidator","component","TextInput","name","placeholder","type","fetchingCaptcha","Preloader","isFetching","captcha","src","id","htmlFor","disabled","buttonDisabled","reduxForm","form","login","connect","state","isAuth","to","statusValidator","status","test","length","email","maxLength","text"],"sourceRoot":""}
{"version":3,"file":"static/js/778.ed867371.chunk.js","mappings":"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","sources":["webpack://socnet/./src/components/Messages/Messages.module.scss?b126","components/Messages/MessagesForm.jsx","components/Messages/Messages.jsx","components/Messages/MessagesContainer.jsx","webpack://socnet/./src/components/common/Textarea/Textarea.module.scss?a94a","components/common/Textarea/Textarea.jsx","hoc/withAuth.js","utilites/validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Messages\":\"Messages_Messages__1EQQz\",\"friends\":\"Messages_friends__nEokc\",\"messages\":\"Messages_messages__ViKAd\",\"friend\":\"Messages_friend__XftjX\",\"active\":\"Messages_active__8HIPB\",\"avatar\":\"Messages_avatar__K6DLY\",\"name\":\"Messages_name__sHyXH\",\"message\":\"Messages_message__LQOQA\",\"messageDate\":\"Messages_messageDate__CpBsr\",\"MessagesForm\":\"Messages_MessagesForm__zWKIY\",\"textarea\":\"Messages_textarea__tglNx\",\"btn\":\"Messages_btn__kwvO+\",\"box\":\"Messages_box__+4OW+\"};","import s from './Messages.module.scss';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport TextArea from '../common/Textarea/Textarea';\r\nimport { textValidator } from '../../utilites/validators';\r\nconst textValidator300 = textValidator(300)\r\n\r\nconst MessagesForm = (props) => {\r\n    const {handleSubmit} = props;\r\n    return (\r\n        <form className={s.MessagesForm} onSubmit={handleSubmit}>\r\n            <Field className={s.textarea} component={TextArea} name=\"message\" validate={[textValidator300]} />\r\n            <button className={s.btn} type=\"submit\">Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({form: 'messages'})(MessagesForm);","import s from \"./Messages.module.scss\";\r\nimport avatar from \"../../assets/avatar.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport MessagesForm from \"./MessagesForm\";\r\n\r\nconst Messages = (props) => {\r\n  return (\r\n    <div className={s.Messages}>\r\n        <ul className={s.friends}>\r\n          {props.friends.length === 0 ? (\r\n            <p className={s.empty}>You don't have friends yet</p>\r\n          ) : (\r\n            props.friends.map((friend) => {\r\n              return (\r\n                <Link\r\n                  className={s.friend}\r\n                  key={friend.id}\r\n                  to={`/profile/${friend.id}`}\r\n                >\r\n                  <img\r\n                    src={friend.photos.small ? friend.photos.small : avatar}\r\n                    alt=\"\"\r\n                    className={s.avatar}\r\n                  />\r\n                  <p className={s.name}>{friend.name}</p>\r\n                </Link>\r\n              );\r\n            })\r\n          )}\r\n        </ul>\r\n        <div className={s.messages}>\r\n          {props.messages.map((message) => {\r\n            return (\r\n              <div className={s.message} key={message.id}>\r\n                <p className={s.messageText}>{message.text}</p>\r\n                <div className={s.messageBox}>\r\n                  <span className={s.messageDate}>{message.date}</span>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n          <MessagesForm onSubmit={(data)=> props.sendMessage(data.message)} />\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport withRedirect from \"../../hoc/withAuth\";\r\nimport Messages from \"./Messages\";\r\nimport {sendMessageThunk as sendMessage} from '../../redux/profileReducer'\r\n\r\nclass MessagesContainer extends React.Component {\r\n    render() {\r\n        return (\r\n            <Messages messages={this.props.messages} friends={this.props.friends} sendMessage={this.props.sendMessage}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state)=> {\r\n    return {\r\n        friends: state.users.friends,\r\n        messages: state.profile.messages,\r\n    }\r\n}\r\n\r\n\r\nexport default compose(withRedirect, connect(mapStateToProps, {sendMessage}))(MessagesContainer)","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Textarea_container__8xwgg\",\"error\":\"Textarea_error__Zh8jH\"};","import s from './Textarea.module.scss';\r\n\r\nconst Textarea = ({ input, meta, ...props }) => {\r\n  return (\r\n    <div className={s.container}>\r\n      {meta.error && meta.error.code === 0 && meta.touched && !meta.active && <p className={s.error}>{meta.error.message}</p>}\r\n      {meta.error && meta.error.code === 1 && <p className={s.error}>{meta.error.message}</p>}\r\n      {meta.error && meta.error.code === 2 && meta.touched && !meta.active && <p className={s.error}>{meta.error.message}</p>}\r\n      <textarea {...input} {...props}></textarea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Textarea;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst withAuth = (Component)=> {\r\n    class withRedirect extends React.Component {\r\n        render() {\r\n            if (this.props.isAuth === false) {\r\n\r\n                return <Navigate to=\"/login\" />\r\n            }\r\n            return(\r\n                <Component {...this.props} />\r\n            )\r\n        }\r\n    }\r\n    const mapStateToProps = (state)=> {\r\n        return {\r\n            isAuth: state.auth.isAuth,\r\n        }\r\n    }\r\n    return connect(mapStateToProps)(withRedirect);\r\n}\r\n\r\n\r\n\r\nexport default withAuth;","export const statusValidator = (status) => {\r\n  if (typeof status === \"string\") {\r\n    return /[a-zA-Z1-9]/.test(status) || status.length === 0;\r\n  }\r\n};\r\n\r\nexport const emailValidator = (email) => {\r\n  if (!(email && /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email))) {\r\n    return { code: 4, message: \"Invalid email address\" };\r\n  }\r\n};\r\n\r\nexport const textValidator = (maxLength) => (text) => {\r\n  if (!text) return { code: 0, message: \"Value mustn't be empty !\" };\r\n  if (text && text.length > maxLength)\r\n    return { code: 1, message: `Max length: ${maxLength} characters !` };\r\n  if (text && !/[a-zA-Z1-9]/.test(text))\r\n    return { code: 2, message: \"Value must contain numbers or letters !\" };\r\n  return undefined;\r\n};\r\n\r\nexport const authValidator = (login) => {\r\n  if (login && login.length < 4)\r\n    return { code: 2, message: \"Min length is 4 characters !\" };\r\n  if (login && login.length > 35)\r\n    return { code: 3, message: \"Max length is 35 characters !\" };\r\n  if (login && !/[a-zA-Z]/.test(login))\r\n    return { code: 1, message: \"Value must contain letters !\" };\r\n  if (!login) return { code: 0, message: \"This field is required\" };\r\n  return undefined;\r\n};\r\n"],"names":["textValidator300","textValidator","reduxForm","form","props","handleSubmit","className","s","onSubmit","Field","component","TextArea","name","validate","type","friends","length","map","friend","to","id","src","photos","small","avatar","alt","messages","message","text","date","data","sendMessage","MessagesContainer","this","React","compose","withRedirect","connect","state","users","profile","input","meta","error","code","touched","active","Component","isAuth","auth","statusValidator","status","test","emailValidator","email","maxLength","authValidator","login"],"sourceRoot":""}